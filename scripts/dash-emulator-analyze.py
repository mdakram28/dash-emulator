#!/usr/bin/env python3

import argparse
import json
import pathlib
import sys
from glob import glob
from typing import Dict, List


def main():
    parser = argparse.ArgumentParser("Parse the playback reports generated by dash-emulator-quic")
    parser.add_argument("--folder", required=True, type=str, help="Folder containing all reports")
    parser.add_argument("--average-stall-dur", action="store_true", help="Print average stall durations")
    parser.add_argument("--average-stall-num", action="store_true", help="Print average stall numbers")
    parser.add_argument("--average-quality-switch-num", action="store_true",
                        help="Print the average number of quality switches")
    args = parser.parse_args()
    classified_reports = fetch_reports_from_folder(args.folder)
    print_header(args.average_stall_dur, args.average_stall_num, args.average_quality_switch_num)
    for video in sorted(classified_reports.keys()):
        files = classified_reports[video]
        PlaybackReportAnalyzer(video, files).analyze(args.average_stall_dur, args.average_stall_num,
                                                     args.average_quality_switch_num)


def print_header(average_stall_dur, average_stall_num, average_quality_switch_num):
    sys.stdout.write("%-20s" % "Video")
    if average_stall_dur:
        sys.stdout.write("%-20s" % "avg-stall-dur")
    if average_stall_num:
        sys.stdout.write("%-20s" % "avg-stall-num")
    if average_quality_switch_num:
        sys.stdout.write("%-20s" % "avg-quality-switch")
    sys.stdout.write("\n")


def fetch_reports_from_folder(folder: str) -> Dict[str, List[str]]:
    files = glob(f"{folder}/*.json")
    classified_files = {}
    for file_path in files:
        filename = pathlib.Path(file_path).stem
        video, index = filename.rsplit('-', maxsplit=1)
        if video not in classified_files:
            classified_files[video] = []
        classified_files[video].append(file_path)
    return classified_files


class PlaybackReportAnalyzer:
    def __init__(self, video: str, reports: List[str]):
        self.video = video
        self.reports = reports
        self._reports_data = None

    def analyze(self, average_stall_dur=False, average_stall_num=False, average_quality_switch_num=False):
        self._reports_data = []
        for report in self.reports:
            with open(report) as f:
                self._reports_data.append(json.load(f))
        sys.stdout.write("%-20s" % self.video)
        if average_stall_dur:
            sys.stdout.write("%-20.2f" % self._calculate_average_stall_dur())
        if average_stall_num:
            sys.stdout.write("%-20.2f" % self._calculate_average_stall_num())
        if average_quality_switch_num:
            sys.stdout.write("%-20.2f" % self._calculate_average_quality_switch_num())
        sys.stdout.write("\n")

    def _calculate_average_stall_dur(self):
        stall_durs = [data["dur_stall"] for data in self._reports_data]
        return sum(stall_durs) / len(stall_durs)

    def _calculate_average_stall_num(self):
        stall_nums = [data["num_stall"] for data in self._reports_data]
        return sum(stall_nums) / len(stall_nums)

    def _calculate_average_quality_switch_num(self):
        quality_switch_nums = [data["num_quality_switches"] for data in self._reports_data]
        return sum(quality_switch_nums) / len(quality_switch_nums)


if __name__ == '__main__':
    main()
